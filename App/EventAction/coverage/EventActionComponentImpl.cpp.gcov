        -:    0:Source:/home/jonathan/Documents/mse/tm/FlightSoftware/FPrime/05_FS/App/EventAction/EventActionComponentImpl.cpp
        -:    0:Programs:85
        -:    1:// ======================================================================
        -:    2:// \title  EventActionComponentImpl.cpp
        -:    3:// \author jonathan
        -:    4:// \brief  cpp file for EventAction component implementation class
        -:    5://
        -:    6:// \copyright
        -:    7:// Copyright 2009-2015, by the California Institute of Technology.
        -:    8:// ALL RIGHTS RESERVED.  United States Government Sponsorship
        -:    9:// acknowledged.
        -:   10://
        -:   11:// ======================================================================
        -:   12:
        -:   13:#include <App/EventAction/EventActionComponentImpl.hpp>
        -:   14:
        -:   15:#include "Fw/Log/LogString.hpp"
        -:   16:#include "Fw/Types/BasicTypes.hpp"
        -:   17:#include "Fw/Types/EightyCharString.hpp"
        -:   18:
        -:   19:namespace App {
        -:   20:
        -:   21:// ----------------------------------------------------------------------
        -:   22:// Construction, initialization, and destruction
        -:   23:// ----------------------------------------------------------------------
        -:   24:
       16:   25:EventActionComponentImpl ::EventActionComponentImpl(const char *const compName)
       16:   26:    : EventActionComponentBase(compName) {}
        -:   27:
       16:   28:void EventActionComponentImpl ::init(const NATIVE_INT_TYPE queueDepth,
        -:   29:                                     const NATIVE_INT_TYPE instance) {
       16:   30:    EventActionComponentBase::init(queueDepth, instance);
        -:   31:
       16:   32:    memset(this->m_eventActionTable, 0, sizeof(this->m_eventActionTable));
       48:   33:    for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_eventActionTable);
        -:   34:         slot++) {
       32:   35:        this->m_eventActionTable[slot].id = 0;
       32:   36:        this->m_eventActionTable[slot].used = false;
        -:   37:    }
       16:   38:}
        -:   39:
       16:   40:EventActionComponentImpl ::~EventActionComponentImpl(void) {}
        -:   41:
        -:   42:// ----------------------------------------------------------------------
        -:   43:// Handler implementations for user-defined typed input ports
        -:   44:// ----------------------------------------------------------------------
        -:   45:
    #####:   46:void EventActionComponentImpl ::seqResp_handler(const NATIVE_INT_TYPE portNum,
        -:   47:                                                FwOpcodeType opCode, U32 cmdSeq,
    #####:   48:                                                Fw::CommandResponse response) {}
        -:   49:
    #####:   50:void EventActionComponentImpl ::logRecv_handler(const NATIVE_INT_TYPE portNum,
        -:   51:                                                FwEventIdType id,
        -:   52:                                                Fw::Time &timeTag,
        -:   53:                                                Fw::LogSeverity severity,
        -:   54:                                                Fw::LogBuffer &args) {
        -:   55:    // @todo Avoid event-sequence loop by detecting if an event triggers a
        -:   56:    // sequence that could emit the same event !
    #####:   57:    for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_eventActionTable);
        -:   58:         slot++) {
    #####:   59:        if ((this->m_eventActionTable[slot].used) and
    #####:   60:            (this->m_eventActionTable[slot].id == id)) {
    #####:   61:            Fw::EightyCharString file("seq.bin");
    #####:   62:            this->seqRun_out(
        -:   63:                0, file);  // this->m_eventActionTable[slot].sequence);
        -:   64:        }
        -:   65:    }
    #####:   66:}
        -:   67:
        -:   68:// ----------------------------------------------------------------------
        -:   69:// Command handler implementations
        -:   70:// ----------------------------------------------------------------------
       20:   71:void EventActionComponentImpl ::EVAC_ADD_cmdHandler(
        -:   72:    const FwOpcodeType opCode, const U32 cmdSeq, U32 id,
        -:   73:    const Fw::CmdStringArg &sequence) {
       20:   74:    bool slotFound = false;
        -:   75:
        -:   76:    // make sure ID is not zero. Zero is reserved for ID filter.
       20:   77:    FW_ASSERT(id != 0);
        -:   78:
        -:   79:    // find existing event
       56:   80:    for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_eventActionTable);
        -:   81:         slot++) {
       40:   82:        if ((this->m_eventActionTable[slot].id == id) and
        2:   83:            (this->m_eventActionTable[slot].used == true)) {
        4:   84:            Fw::LogStringArg log("seq");
        -:   85:            // this->m_eventActionTable[slot].
        2:   86:            this->log_WARNING_HI_EVAC_ALREADY_REGISTERED(id, log);
        2:   87:            this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        2:   88:            return;
        -:   89:        }
        -:   90:    }
        -:   91:
       54:   92:    for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_eventActionTable);
        -:   93:         slot++) {
       36:   94:        if ((not this->m_eventActionTable[slot].used) and (not slotFound)) {
       16:   95:            this->m_eventActionTable[slot].id = id;
       32:   96:            Fw::EightyCharString seq(sequence.toChar());
       16:   97:            this->m_eventActionTable[slot].sequence = &seq;
       16:   98:            this->m_eventActionTable[slot].used = true;
        -:   99:
       16:  100:            slotFound = true;
        -:  101:        }
        -:  102:    }
        -:  103:
       34:  104:    Fw::LogStringArg seq("seq");
        -:  105:
       18:  106:    if (not slotFound) {
        2:  107:        this->log_WARNING_LO_EVAC_LIST_FULL(id);
        2:  108:        this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        2:  109:        return;
        -:  110:    }
        -:  111:
       16:  112:    this->log_ACTIVITY_HI_EVAC_ADDED(seq, id);
       16:  113:    this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_OK);
        -:  114:}
        -:  115:
        6:  116:void EventActionComponentImpl ::EVAC_REMOVE_cmdHandler(
        -:  117:    const FwOpcodeType opCode, const U32 cmdSeq, U32 id) {
        6:  118:    bool slotFound = false;
       18:  119:    for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_eventActionTable);
        -:  120:         slot++) {
       16:  121:        if ((this->m_eventActionTable[slot].used) and
        4:  122:            (this->m_eventActionTable[slot].id == id)) {
        2:  123:            this->m_eventActionTable[slot].id = 0;
        2:  124:            this->m_eventActionTable[slot].used = false;
        -:  125:
        2:  126:            slotFound = true;
        -:  127:        }
        -:  128:    }
        -:  129:
       12:  130:    Fw::LogStringArg seq("seq");
        6:  131:    if (slotFound) {
        2:  132:        this->log_ACTIVITY_HI_EVAC_REMOVED(seq, id);
        2:  133:        this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_OK);
        -:  134:    } else {
        4:  135:        this->log_WARNING_LO_EVAC_NOT_FOUND(id);
        4:  136:        this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_EXECUTION_ERROR);
        -:  137:    }
        6:  138:}
        -:  139:
        4:  140:void EventActionComponentImpl ::EVAC_DUMP_cmdHandler(const FwOpcodeType opCode,
        -:  141:                                                     const U32 cmdSeq) {
       12:  142:    for (U32 slot = 0; slot < FW_NUM_ARRAY_ELEMENTS(this->m_eventActionTable);
        -:  143:         slot++) {
        8:  144:        if (this->m_eventActionTable[slot].used) {
        8:  145:            Fw::LogStringArg seq("seq");
        4:  146:            this->log_ACTIVITY_HI_EVAC_DUMP(seq,
        -:  147:                                            this->m_eventActionTable[slot].id);
        -:  148:        }
        -:  149:    }
        4:  150:    printf("cmdSeq %u\n", cmdSeq);
        4:  151:    this->cmdResponse_out(opCode, cmdSeq, Fw::COMMAND_OK);
        4:  152:}
        -:  153:
        6:  154:}  // end namespace App
