<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../Autocoders/schema/ISF/component_schema.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<!--
EventAction component : Receive events from ActionLogger and trigger command sequence in CmdSequencer
-->

<component name="EventAction" kind="active" namespace="App" modeler="true">
    <!-- Import command ports -->
    <import_port_type>Fw/Cmd/CmdPortAi.xml</import_port_type>
    <import_port_type>Fw/Cmd/CmdRegPortAi.xml</import_port_type>
    <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
    <!-- Import event ports -->
    <import_port_type>Fw/Log/LogPortAi.xml</import_port_type>
    <import_port_type>Fw/Log/LogTextPortAi.xml</import_port_type>
    <!-- Import telemetry ports -->
    <import_port_type>Fw/Tlm/TlmPortAi.xml</import_port_type>
    <import_port_type>Fw/Cmd/CmdResponsePortAi.xml</import_port_type>
    <import_port_type>Svc/Seq/CmdSeqInPortAi.xml</import_port_type>

    <ports>
        <!-- Command port definitions: command input receives commands, command reg out, and response out are
        ports used to register with the command dispatcher, and return responses to it -->
        <port name="cmdDisp" data_type="Fw::Cmd" kind="input" role="Cmd" max_number="1">
        </port>
        <port name="cmdRegOut" data_type="Fw::CmdReg" kind="output" role="CmdRegistration" max_number="1">
        </port>
        <port name="cmdResponseOut" data_type="Fw::CmdResponse" kind="output" role="CmdResponse" max_number="1">
        </port>
        <!-- Event ports: send events, and text formated events -->
        <port name="eventOut" data_type="Fw::Log" kind="output" role="LogEvent" max_number="1">
        </port>
        <port name="txtEventOut" data_type="Fw::LogText" kind="output" role="LogTextEvent" max_number="1">
        </port>
        <!-- Telemetry ports -->
        <!--<port name="tlmOut" data_type="Fw::Tlm" kind="output" role="Telemetry" max_number="1">
        </port>-->
        <!-- CommandSequencer ports  -->
        <port name="seqRun" data_type="Svc::CmdSeqIn" kind="output" max_number="1">
        </port>
        <port name="seqResp" data_type="Fw::CmdResponse" kind="async_input" max_number="1">
        </port>
        <!-- Log ports -->
        <port name="logRecv" data_type="Fw::Log" kind="async_input">
        </port>
    </ports>

    <commands>
        <command kind="async" opcode="0" mnemonic="EVAC_ADD">
            <comment>Add sequence for an event id</comment>
            <args>
                <arg name="id" type="U32" comment="Event id to detect">
                </arg>
                <arg name="sequence" type="string" size="40" comment="Sequence to launch after event is detected">
                </arg>
            </args>
        </command>
        <command kind="async" opcode="1" mnemonic="EVAC_REMOVE">
            <comment>Remove sequence for a specific envent id</comment>
            <args>
                <arg name="id" type="U32" comment="Event id">
                </arg>
            </args>
        </command>
        <command kind="async" opcode="2" mnemonic="EVAC_DUMP">
            <comment>Dump event-sequence list</comment>
        </command>
    </commands>

    <events>
        <event id="0" name="EVAC_ADDED" severity="ACTIVITY_HI" format_string="Sequence %s added for event 0x%02X.">
            <comment>
            Sequence added for a specific event id
            </comment>
            <args>
                <arg name="sequence" type="string" size="40">
                </arg>
                <arg name="eventId" type="U32">
                </arg>
            </args>
        </event>
        <event id="1" name="EVAC_REMOVED" severity="ACTIVITY_HI" format_string="Sequence %s removed for event 0x%02X.">
            <comment>
            Sequence removed for a specific event id
            </comment>
            <args>
                <arg name="sequence" type="string" size="40">
                </arg>
                <arg name="eventId" type="U32">
                </arg>
            </args>
        </event>
        <event id="2" name="EVAC_LIST_FULL" severity="WARNING_LO" format_string="Unable to add sequence for event 0x%02X, list full.">
            <comment>
            Attempted to add a new event id to detect to full list
            </comment>
            <args>
                <arg name="eventId" type="U32">
                </arg>
            </args>
        </event>
        <event id="3" name="EVAC_NOT_FOUND" severity="WARNING_LO" format_string="Unable to remove sequence for event 0x%02X, not found.">
            <comment>
            Sequence for specific event id not found
            </comment>
            <args>
                <arg name="eventId" type="U32">
                </arg>
            </args>
        </event>
        <event id="4" name="EVAC_ALREADY_REGISTERED" severity="WARNING_HI" format_string="Unable to add sequence - Event 0x%02X already registered for sequence %s">
            <comment>Unable to add sequence</comment>
            <args>
                <arg name="eventId" type="U32">
                </arg>
                <arg name="sequence" type="string" size="40">
                </arg>
            </args>
        </event>
        <event id="5" name="EVAC_DUMP" severity="ACTIVITY_HI" format_string="Sequence %s registered for event 0x%02X">
            <comment>Used to dump event-sequence items</comment>
            <args>
                <arg name="sequence" type="string" size="40">
                </arg>
                <arg name="eventId" type="U32">
                </arg>
            </args>
        </event>
        <event id="6" name="EVAC_RUN" severity="ACTIVITY_HI" format_string="Event 0x%02X received - Running sequence %s">
            <comment>A sequence has been triggered by an event</comment>
            <args>
                <arg name="eventId" type="U32">
                </arg>
                <arg name="sequence" type="string" size="40">
                </arg>
            </args>
        </event>
    </events>
</component>